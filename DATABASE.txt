USERS
SEX
BUSINESS_OWNERS
DELIVERIES
OWNER_LIST
USERS_INFO
TRANSACTIONS
BUSINESS
BATCH_OF_PRODUCTS
CONSUMER
TRANSACTION_STATUS
PRODUCTS
BATCH_STATUS
PROVIDER
SECTIONS
SUBSECTIONS
PRODUCT_BELONGING
PROVIDERS_PRICE
PROVIDER_CONTACTS
CURRENCY
BUSINESS_OWNER_TYPE
ACCOUNTS
BUSINESS_ACCOUNTS
	


CREATE TABLE USERS(
	ID SERIAL PRIMARY KEY NOT NULL, 
	LOGIN VARCHAR(50) UNIQUE NOT NULL, 
	PASS VARCHAR(100) NOT NULL
);

--DROP TABLE USERS CASCADE;

INSERT INTO USERS(LOGIN, PASS) VALUES('TEST', 'b1b3773a05c0ed0176787a4f1574ff0075f7521e'); --qwerty
INSERT INTO USERS(LOGIN, PASS) VALUES('Musamir', '297a96ae4cdf7633b6cd0aeb18f563a139791c90'); --musamir
INSERT INTO USERS(LOGIN, PASS) VALUES('Amirsho', 'f12eeb1b7fe09d79c3519c7dd1b49b75586512c1'); --amirsho
INSERT INTO USERS(LOGIN, PASS) VALUES('Umeda', '8beedd64a0052e5b7eae74b92364f4d0283ff5cf'); --umeda

SELECT * FROM USERS;

--------------------------------------------------------

CREATE TABLE SEX(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(20) UNIQUE NOT NULL
);

INSERT INTO SEX(NAME) VALUES
	('Male'),
	('Female');
	
SELECT * FROM SEX;

--DROP TABLE SEX CASCADE;

CREATE TABLE USERS_INFO(
	ID INT UNIQUE NOT NULL, 
	FULLNAME VARCHAR(30),
	SEX INT,
	DATE_OF_BIRTH DATE,
	FOREIGN KEY (ID) REFERENCES USERS (ID),
	FOREIGN KEY (SEX) REFERENCES SEX (ID)
);


--DROP TABLE USERS_INFO CASCADE;

INSERT INTO USERS_INFO VALUES
(1, 'TEST NAME', 1, '2020.10.15');

INSERT INTO USERS_INFO VALUES
(2, 'Mirov Musamir Amriddinovich', 1, '1999.11.28'),
(3, 'Mirov Amirsho Amriddinovich', 1, '1998.06.17'),
(4, 'Mirova Umeda Amriddinovna', 2, '1996.12.24');

SELECT * FROM USERS_INFO;

SELECT FULLNAME, LOGIN, SEX.NAME AS SEX, DATE_OF_BIRTH AS "DATE OF BIRTH" FROM USERS_INFO, USERS, SEX 
WHERE 
	USERS_INFO.ID = USERS.ID AND SEX.ID = SEX;
	
-----------------------------------------------------------------------------------

CREATE TABLE CURRENCY(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(20) UNIQUE NOT NULL
);

INSERT INTO CURRENCY(NAME) VALUES
('TJS'),
('USD');

SELECT * FROM CURRENCY;

CREATE TABLE BUSINESS_OWNER_TYPE(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(30) UNIQUE NOT NULL
);

INSERT INTO BUSINESS_OWNER_TYPE(NAME) VALUES
('INDIVIDUAL');

SELECT * FROM BUSINESS_OWNER_TYPE;

CREATE TABLE BUSINESS_OWNERS(
	ID SERIAL PRIMARY KEY NOT NULL,
	USER_ID INT, 
	OWNER_TYPE INT NOT NULL,
	FOREIGN KEY (USER_ID) REFERENCES USERS (ID),
	FOREIGN KEY (OWNER_TYPE) REFERENCES BUSINESS_OWNER_TYPE (ID)
);

ALTER TABLE BUSINESS_OWNERS
    ADD CONSTRAINT FK_BUSINESS_OWNERS_BUSINESS_OWNER_TYPE FOREIGN KEY (OWNER_TYPE) REFERENCES BUSINESS_OWNER_TYPE (ID);

SELECT * FROM BUSINESS_OWNERS;

CREATE TABLE ACCOUNTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	BUSINESS_OWNER_ID INT NOT NULL,
	BALANCE INT NOT NULL,
	CURRENCY INT NOT NULL,
	LAST_UPDATE DATE NOT NULL,
	FOREIGN KEY (CURRENCY) REFERENCES CURRENCY(ID),
	FOREIGN KEY (BUSINESS_OWNER_ID) REFERENCES BUSINESS_OWNERS(ID)
);

SELECT * FROM ACCOUNTS;

--DROP TABLE BUSINESS_OWNERS CASCADE;

CREATE TABLE BUSINESS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(100) UNIQUE NOT NULL,
	DESCRIPTION VARCHAR(500),
	START_DATE DATE
);

ALTER TABLE BUSINESS 
DROP COLUMN CAPITAL;

--DROP TABLE BUSINESS CASCADE;

INSERT INTO BUSINESS(NAME, DESCRIPTION, START_DATE, BALANCE, CAPITAL) 
VALUES
	('Kuding Detox', 'Detox tea', '2021.06.14'),
	('Power', 'Power Capsule', '2021.06.14');

SELECT * FROM BUSINESS;

CREATE TABLE BUSINESS_ACCOUNTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	BUSINESS_ID INT NOT NULL,
	BALANCE INT NOT NULL,
	CURRENCY INT NOT NULL,
	LAST_UPDATE DATE,
	FOREIGN KEY (CURRENCY) REFERENCES CURRENCY(ID),
	FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(ID)
);

SELECT * FROM BUSINESS_ACCOUNTS;

CREATE TABLE OWNER_LIST(
	ID SERIAL PRIMARY KEY NOT NULL,
	USER_ID INT NOT NULL,
	BUSINESS_ID INT NOT NULL,
	FOREIGN KEY (USER_ID) REFERENCES USERS (ID),
	FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS (ID),
	UNIQUE(USER_ID, BUSINESS_ID)
);

SELECT * FROM OWNER_LIST;

INSERT INTO OWNER_LIST(USER_ID, BUSINESS_ID) VALUES
(3, 1), (4, 1), (3, 2);

DROP TABLE OWNER_LIST;

SELECT BUSINESS_ID FROM OWNER_LIST GROUP BY BUSINESS_ID ORDER BY BUSINESS_ID ASC;

SELECT CURRENT_DATE ;

-----------------------------------------------------------------------------

CREATE TABLE PRODUCT_TYPE(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(20)
);

--DROP TABLE PRODUCT_TYPE CASCADE;

SELECT * FROM PRODUCT_TYPE;

INSERT INTO PRODUCT_TYPE(NAME) VALUES('SPORT');

SELECT * FROM PG_CATALOG.PG_TABLES;



CREATE TABLE PRODUCTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	DESCRIPTION VARCHAR(200),
	FOREIGN KEY (PRODUCT_TYPE) REFERENCES PRODUCT_TYPE (ID),
	UNIQUE(DESCRIPTION, NAME)
);

--DROP TABLE PRODUCTS CASCADE;

INSERT INTO PRODUCTS(NAME, DESCRIPTION) VALUES
('Kuding Tea', '100 natural detox tea'),
('Power', 'Original power capsule for weight gain. Ð¡ontains 50 capsules');

SELECT * FROM PRODUCTS;

SELECT PRODUCTS.NAME AS "PRODUCT", PRODUCT_TYPE.NAME AS "PRODUCT TYPE", DESCRIPTION AS "DESCRIOTION" 
	FROM PRODUCTS, PRODUCT_TYPE; 

CREATE TABLE SECTIONS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(50) UNIQUE NOT NULL
);

INSERT INTO SECTIONS(NAME) VALUES
('Summer'), 
('Clothes'),
('Shoes'),
('Beauty'),
('Home'),
('Electronics'),
('Health & Nutrition'),
('Kids'),
('Food & Drink'),
('Sport'),
('Travel');

SELECT * FROM SECTIONS;

CREATE TABLE SUBSECTIONS(
	ID SERIAL PRIMARY KEY NOT NULL,
	SECTION_ID INT NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	FOREIGN KEY (SECTION_ID) REFERENCES SECTIONS (ID),
	UNIQUE(SECTION_ID, NAME)
);


INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES
(2,'Women''s Clothing'),
(2,'Man''s Clothing'),
(2,'Accessories'),
(2,'Girl''s Clothing'),
(2,'Boy''s Clothing'),
(2,'Baby''s Clothing');

INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES
(3,'Women''s Shoes'),
(3,'Man''s Shoes'),
(3,'Girl''s Shoes'),
(3,'Boy''s Shoes'),
(3,'Baby''s Shoes');

INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES
(4,'Bath & Showe Products'),
(4,'Beauty Gift Sets'),
(4,'Cosmetic Accessories'),
(4,'Eye Makeup'),
(4,'Face Makeup'),
(4,'Hair Care'),
(4,'Lip Products'),
(4,'Nail Care'),
(4,'Perfume & Cologone'),
(4,'Shaving & Hair Removal'),
(4,'Skin Care'),
(4,'Exclusive Brands');

INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES(10, 'For Weight Gain');

SELECT * FROM SUBSECTIONS;

CREATE TABLE PRODUCT_BELONGING(
	ID SERIAL PRIMARY KEY NOT NULL,
	PRODUCT_ID INT NOT NULL,
	SUBSECTION_ID INT NOT NULL,
	FOREIGN KEY (SUBSECTION_ID) REFERENCES SUBSECTIONS (ID),
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (ID),
	UNIQUE(PRODUCT_ID, SUBSECTION_ID)
);

INSERT INTO PRODUCT_BELONGING(PRODUCT_ID, SUBSECTION_ID) VALUES
(1, 22), -- KUDING - SKIN CARE
(2, 24); -- POWER - SPORT GAIN WEIGHT

SELECT * FROM PRODUCT_BELONGING;

CREATE TABLE PROVIDER_CONTACTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	FULLNAME VARCHAR(30),
	PHONE VARCHAR(15),
	CONTACTS VARCHAR(30),
	ADDRESS VARCHAR(100),
	ADDRESS_ON_MAP VARCHAR(100),
	DESCRIPTION VARCHAR(300),
	UNIQUE(FULLNAME, PHONE, CONTACTS, ADDRESS)
);

ALTER TABLE PROVIDER_CONTACTS 
ADD COLUMN ADDRESS_ON_MAP VARCHAR(100);

INSERT INTO PROVIDER_CONTACTS(FULLNAME, PHONE, CONTACTS, ADDRESS, DESCRIPTION) VALUES
('Parvina Iskhaki', '901010401', 'INSTAGRAM @parvina.iskhahi', 'Mirzo Mastongulova 38/1 r 24', 'the phone belongs to Anvar - Parvina`s father');

INSERT INTO PROVIDER_CONTACTS(FULLNAME, PHONE, CONTACTS, ADDRESS, DESCRIPTION) VALUES
('Parvina Iskhaki', '901010401', 'INSTAGRAM @parvina.iskhahi', 'Mirzo Mastongulova 38/1 r 24', 'the phone belongs to Anvar - Parvina`s father');


UPDATE PROVIDER_CONTACTS SET ADDRESS_ON_MAP = '38.550368 68.812826' WHERE ID = 1;

--DROP TABLE PROVIDER_CONTACTS CASCADE;

SELECT * FROM PROVIDER_CONTACTS;

CREATE TABLE PROVIDER(
	ID SERIAL PRIMARY KEY NOT NULL,
	INFORMATION INT,
	PRODUCT INT,
	FOREIGN KEY (INFORMATION) REFERENCES PROVIDER_CONTACTS (ID),
	FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS (ID),
	UNIQUE(INFORMATION, PRODUCT)
); 

INSERT INTO PROVIDER(INFORMATION, PRODUCT) VALUES
(1, 1);

--DROP TABLE PROVIDER CASCADE;

SELECT * FROM PROVIDER;

CREATE TABLE PROVIDERS_PRICE(
	ID SERIAL PRIMARY KEY NOT NULL,
	PROVIDER INT, 
	AMOUNT INT,
	PRICE INT,
	FOREIGN KEY (PROVIDER) REFERENCES PROVIDER (ID),
	UNIQUE(PROVIDER, AMOUNT, PRICE)
);

INSERT INTO PROVIDERS_PRICE(PROVIDER, AMOUNT, PRICE) VALUES
(1, 150, 300);

SELECT * FROM PROVIDERS_PRICE;

--DROP TABLE PROVIDERS_PRICE;

CREATE TABLE TRANSACTION_STATUS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(30) UNIQUE NOT NULL
);

INSERT INTO TRANSACTION_STATUS(NAME) VALUES
('PENDING'),
('CANCELLED'),
('SUCCESS');

SELECT * FROM TRANSACTION_STATUS;

DROP TABLE TRANSACTION_STATUS;

CREATE TABLE CONSUMER(
	ID SERIAL PRIMARY KEY NOT NULL,
	FULLNAME VARCHAR(20),
	PHONE VARCHAR(15) UNIQUE NOT NULL,
	ADDRESS VARCHAR(30) NOT NULL,
	ADDRESS_ON_MAP VARCHAR(30),
	CONTACTS VARCHAR(50),
	DESCRIPTION VARCHAR(200)
);

SELECT * FROM CONSUMER;

CREATE TABLE BATCH_STATUS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(30) UNIQUE NOT NULL
);

INSERT INTO BATCH_STATUS(NAME) VALUES
('OUT OF STOCK'),
('AVAILABLE IN STOCK'),
('CANCELLED');

SELECT * FROM BATCH_STATUS;

CREATE TABLE BATCH_OF_PRODUCTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	PRODUCT INT NOT NULL,
	PURCHASE_DATE DATE NOT NULL,
	AMOUNT INT NOT NULL,
	REMAINING_AMOUNT INT NOT NULL,
	PRIME_COST INT NOT NULL,
	SALE_PRICE INT NOT NULL,
	STATUS INT NOT NULL,
	FOREIGN KEY (STATUS) REFERENCES BATCH_STATUS(ID)
);

SELECT * FROM BATCH_OF_PRODUCTS;

CREATE TABLE TRANSACTIONS(
	ID SERIAL PRIMARY KEY NOT NULL,
	PRICE INT NOT NULL,
	T_DATE DATE NOT NULL,
	BATCH INT NOT NULL,
	AMOUNT INT NOT NULL,
	CONSUMER INT NOT NULL,
	STATUS INT NOT NULL,
	LAST_UPDATE DATE,
	FOREIGN KEY (BATCH) REFERENCES BATCH_OF_PRODUCTS(ID),
	FOREIGN KEY (CONSUMER) REFERENCES CONSUMER(ID),
	FOREIGN KEY (STATUS) REFERENCES TRANSACTION_STATUS(ID)
);


ALTER TABLE TRANSACTIONS 
ADD COLUMN PRICE INT;

SELECT * FROM TRANSACTIONS;

CREATE TABLE DELIVERIES(
	ID SERIAL PRIMARY KEY NOT NULL,
	ADDRESS VARCHAR(30) NOT NULL,
	DESCRIPTION VARCHAR(300),
	DELIVERYMAN INT NOT NULL,
	TRANSACTION_ID INT NOT NULL,
	FOREIGN KEY (DELIVERYMAN) REFERENCES USERS(ID),
	FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTIONS(ID) 
);

SELECT * FROM DELIVERIES;

SELECT FULLNAME, string_agg(BUSINESS.NAME, ', ' ORDER BY BUSINESS.NAME) FROM USERS_INFO, BUSINESS, OWNER_LIST, USERS 
						WHERE OWNER_LIST.USER_ID = USERS.ID AND OWNER_LIST.BUSINESS_ID = BUSINESS.ID AND USERS.ID = USERS_INFO.ID GROUP BY FULLNAME ORDER BY FULLNAME;

SELECT BUSINESS.NAME, string_agg(FULLNAME, ', ' ORDER BY FULLNAME) FROM USERS_INFO, BUSINESS, OWNER_LIST, USERS 
						WHERE OWNER_LIST.USER_ID = USERS.ID AND OWNER_LIST.BUSINESS_ID = BUSINESS.ID AND USERS.ID = USERS_INFO.ID GROUP BY BUSINESS.NAME ORDER BY BUSINESS.NAME;


