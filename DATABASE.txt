ACCOUNTS
BATCH_OF_PRODUCTS
BATCH_STATUS
BUSINESS
BUSINESS_ACCOUNTS
BUSINESS_OWNER_TYPE
BUSINESS_OWNERS
BUSINESS_STATUS
CONSUMER
CURRENCY
DELIVERIES
DELIVERIES_STATUS
OWNER_LIST
PRODUCT_BELONGING
PRODUCTS
PROVIDER
PROVIDER_CONTACTS
PROVIDERS_PRICE
SECTIONS
SEX
SUBSECTIONS
TRANSACTION_STATUS
TRANSACTIONS
USERS
USERS_INFO


CREATE TABLE USERS(
	ID SERIAL PRIMARY KEY NOT NULL, 
	LOGIN VARCHAR(50) UNIQUE NOT NULL, 
	PASS VARCHAR(100) NOT NULL
);

--DROP TABLE USERS CASCADE;

INSERT INTO USERS(LOGIN, PASS) VALUES('TEST', 'b1b3773a05c0ed0176787a4f1574ff0075f7521e'); --qwerty
INSERT INTO USERS(LOGIN, PASS) VALUES('Musamir', '297a96ae4cdf7633b6cd0aeb18f563a139791c90'); --musamir
INSERT INTO USERS(LOGIN, PASS) VALUES('Amirsho', 'f12eeb1b7fe09d79c3519c7dd1b49b75586512c1'); --amirsho
INSERT INTO USERS(LOGIN, PASS) VALUES('Umeda', '8beedd64a0052e5b7eae74b92364f4d0283ff5cf'); --umeda
INSERT INTO USERS(LOGIN, PASS) VALUES('Azamat', 'b1b3773a05c0ed0176787a4f1574ff0075f7521e'); --qwerty

SELECT * FROM USERS;

--------------------------------------------------------

CREATE TABLE SEX(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(20) UNIQUE NOT NULL
);

INSERT INTO SEX(NAME) VALUES
	('Male'),
	('Female');
	
SELECT * FROM SEX;

--DROP TABLE SEX CASCADE;

CREATE TABLE USERS_INFO(
	ID INT UNIQUE NOT NULL, 
	FULLNAME VARCHAR(30),
	SEX INT,
	DATE_OF_BIRTH DATE,
	PROFILE_PHOTO VARCHAR(50),
	EMAIL VARCHAR(50) UNIQUE,
	PHONE VARCHAR(15) UNIQUE,
	FOREIGN KEY (ID) REFERENCES USERS (ID),
	FOREIGN KEY (SEX) REFERENCES SEX (ID)
);


ALTER TABLE USERS_INFO 
ADD COLUMN EMAIL VARCHAR(50);

ALTER TABLE USERS_INFO 
ADD COLUMN PHONE VARCHAR(15);


ALTER TABLE USERS_INFO 
ADD COLUMN PROFILE_PHOTO VARCHAR(50);

--DROP TABLE USERS_INFO CASCADE;

INSERT INTO USERS_INFO VALUES
(1, 'TEST NAME', 1, '2020.10.15');

INSERT INTO USERS_INFO VALUES
(2, 'Mirov Musamir Amriddinovich', 1, '1999.11.28'),
(3, 'Mirov Amirsho Amriddinovich', 1, '1998.06.17'),
(4, 'Mirova Umeda Amriddinovna', 2, '1996.12.24');

INSERT INTO USERS_INFO VALUES
(5, 'Radjabov Azamat', 1, '1999.11.02');

SELECT * FROM USERS_INFO;

SELECT USERS_INFO.ID, FULLNAME, LOGIN, SEX.NAME AS SEX, DATE_OF_BIRTH AS "DATE OF BIRTH", EMAIL , PHONE  FROM USERS_INFO, USERS, SEX
WHERE 
	USERS_INFO.ID = USERS.ID AND SEX.ID = SEX ORDER BY FULLNAME;
	
SELECT USERS_INFO.ID, FULLNAME, LOGIN, SEX.NAME AS SEX, DATE_OF_BIRTH, COALESCE(PROFILE_PHOTO, '') FROM USERS_INFO, USERS, SEX WHERE USERS_INFO.ID = USERS.ID AND SEX.ID = SEX  ORDER BY FULLNAME
	
SELECT USERS_INFO.ID, LOGIN, FULLNAME, SEX.NAME, DATE_OF_BIRTH, PROFILE_PHOTO FROM USERS_INFO, USERS, SEX WHERE USERS.ID = 2 AND USERS_INFO.ID = USERS.ID AND SEX.ID = SEX  ORDER BY FULLNAME
	
UPDATE USERS_INFO SET EMAIL = 'mirovmusamir@gmail.com' WHERE ID = 2;
UPDATE USERS_INFO SET PHONE = '+992919440364' WHERE ID = 2;
	
UPDATE USERS_INFO SET FULLNAME = 'Mirov Musamir Amriddinovich', SEX = (SELECT SEX.ID FROM SEX WHERE SEX.NAME = 'Male') WHERE ID = 2;
	
-----------------------------------------------------------------------------------

CREATE TABLE CURRENCY(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(20) UNIQUE NOT NULL
);

INSERT INTO CURRENCY(NAME) VALUES
('TJS'),
('USD');

SELECT * FROM CURRENCY;

CREATE TABLE BUSINESS_OWNER_TYPE(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(30) UNIQUE NOT NULL
);

INSERT INTO BUSINESS_OWNER_TYPE(NAME) VALUES
('INDIVIDUAL');

INSERT INTO BUSINESS_OWNER_TYPE(NAME) VALUES
('ORGANIZATION');

SELECT * FROM BUSINESS_OWNER_TYPE;

CREATE TABLE BUSINESS_OWNERS(
	ID SERIAL PRIMARY KEY NOT NULL,
	USER_ID INT, 
	OWNER_TYPE INT NOT NULL,
	FOREIGN KEY (USER_ID) REFERENCES USERS (ID),
	FOREIGN KEY (OWNER_TYPE) REFERENCES BUSINESS_OWNER_TYPE (ID)
);

ALTER TABLE BUSINESS_OWNERS
    ADD CONSTRAINT FK_BUSINESS_OWNERS_BUSINESS_OWNER_TYPE FOREIGN KEY (OWNER_TYPE) REFERENCES BUSINESS_OWNER_TYPE (ID);

INSERT INTO BUSINESS_OWNERS(USER_ID, OWNER_TYPE) VALUES
(3, 1), (4, 1);

SELECT * FROM BUSINESS_OWNERS;

SELECT BUSINESS_OWNERS.ID, FULLNAME AS "NAME", SEX.NAME AS "SEX", DATE_OF_BIRTH AS "DATE OF BIRTH", BUSINESS_OWNER_TYPE.NAME AS "BUSINES TYPE"  
	FROM USERS_INFO, SEX, USERS, BUSINESS_OWNERS, BUSINESS_OWNER_TYPE
		WHERE USERS_INFO.ID = USERS.ID AND BUSINESS_OWNERS.USER_ID = USERS.ID AND BUSINESS_OWNER_TYPE.ID = BUSINESS_OWNERS.OWNER_TYPE AND SEX.ID = USERS_INFO.SEX;

CREATE TABLE ACCOUNTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	BUSINESS_OWNER_ID INT NOT NULL,
	BALANCE INT NOT NULL,
	CURRENCY INT NOT NULL,
	LAST_UPDATE DATE NOT NULL,
	FOREIGN KEY (CURRENCY) REFERENCES CURRENCY(ID),
	FOREIGN KEY (BUSINESS_OWNER_ID) REFERENCES BUSINESS_OWNERS(ID)
);


INSERT INTO ACCOUNTS(BUSINESS_OWNER_ID, BALANCE, CURRENCY, LAST_UPDATE) VALUES
(1, 1000, 2, '2021.06.16'), (2, 15000, 1, '2021.06.16');

SELECT BUSINESS_OWNERS.ID, FULLNAME AS "NAME", SEX.NAME AS "SEX", DATE_OF_BIRTH AS "DATE OF BIRTH", BUSINESS_OWNER_TYPE.NAME AS "BUSINES TYPE", ACCOUNTS.BALANCE AS "BALANCE", 
	CURRENCY.NAME AS "CURRENCY", LAST_UPDATE AS "LAST UPDATE" 
		FROM USERS_INFO, SEX, USERS, BUSINESS_OWNERS, BUSINESS_OWNER_TYPE, ACCOUNTS, CURRENCY
			WHERE USERS_INFO.ID = USERS.ID AND BUSINESS_OWNERS.USER_ID = USERS.ID AND BUSINESS_OWNER_TYPE.ID = BUSINESS_OWNERS.OWNER_TYPE 
					AND SEX.ID = USERS_INFO.SEX AND ACCOUNTS.BUSINESS_OWNER_ID = BUSINESS_OWNERS.ID AND CURRENCY.ID = ACCOUNTS.CURRENCY;

SELECT * FROM ACCOUNTS;

--DROP TABLE BUSINESS_OWNERS CASCADE;

CREATE TABLE BUSINESS_STATUS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(100) UNIQUE NOT NULL
);

INSERT INTO BUSINESS_STATUS(NAME) VALUES
('OPENED'), ('CLOSED');

SELECT * FROM BUSINESS_STATUS;

CREATE TABLE BUSINESS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(100) UNIQUE NOT NULL,
	DESCRIPTION VARCHAR(500),
	START_DATE DATE,
	STATUS INT NOT NULL,
	FOREIGN KEY (STATUS) REFERENCES BUSINESS_STATUS(ID)
);

ALTER TABLE BUSINESS 
ADD COLUMN STATUS INT;

ALTER TABLE BUSINESS
    ADD CONSTRAINT FK_BUSINESS_BUSINESS_STATUS FOREIGN KEY (STATUS) REFERENCES BUSINESS_STATUS (ID);

SELECT BUSINESS.ID, BUSINESS.NAME AS "BUSINESS", DESCRIPTION AS "DESCRIPTION", START_DATE AS "START DATE", BUSINESS_STATUS.NAME AS "STATUS" FROM BUSINESS, BUSINESS_STATUS 
		WHERE BUSINESS.STATUS = BUSINESS_STATUS.ID ORDER BY BUSINESS.ID;

SELECT * FROM BUSINESS;

ALTER TABLE BUSINESS 
DROP COLUMN CAPITAL;

--DROP TABLE BUSINESS CASCADE;

INSERT INTO BUSINESS(NAME, DESCRIPTION, START_DATE, BALANCE, CAPITAL) 
VALUES
	('Kuding Detox', 'Detox tea', '2021.06.14'),
	('Power', 'Power Capsule', '2021.06.14');

SELECT * FROM BUSINESS;

CREATE TABLE BUSINESS_ACCOUNTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	BUSINESS_ID INT NOT NULL,
	BALANCE INT NOT NULL,
	CURRENCY INT NOT NULL,
	LAST_UPDATE DATE,
	FOREIGN KEY (CURRENCY) REFERENCES CURRENCY(ID),
	FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS(ID)
);

INSERT INTO BUSINESS_ACCOUNTS(BUSINESS_ID, BALANCE, CURRENCY, LAST_UPDATE) VALUES
(1, 5000, 1, '2021.06.16'), (2, 1000, 1, '2021.06.16');

SELECT BUSINESS.NAME AS "BUSINESS", BUSINESS_ACCOUNTS.BALANCE AS "BALANCE", CURRENCY.NAME AS "CURRENCY", BUSINESS_ACCOUNTS.LAST_UPDATE AS "LAST UPDATE" 
	FROM BUSINESS, BUSINESS_ACCOUNTS, CURRENCY 
		WHERE BUSINESS_ACCOUNTS.BUSINESS_ID = BUSINESS.ID AND CURRENCY.ID = BUSINESS_ACCOUNTS.CURRENCY;

SELECT * FROM BUSINESS_ACCOUNTS;

CREATE TABLE OWNER_LIST(
	ID SERIAL PRIMARY KEY NOT NULL,
	USER_ID INT NOT NULL,
	BUSINESS_ID INT NOT NULL,
	FOREIGN KEY (USER_ID) REFERENCES USERS (ID),
	FOREIGN KEY (BUSINESS_ID) REFERENCES BUSINESS (ID),
	UNIQUE(USER_ID, BUSINESS_ID)
);

SELECT * FROM OWNER_LIST;

INSERT INTO OWNER_LIST(USER_ID, BUSINESS_ID) VALUES
(3, 1), (4, 1), (3, 2);

DROP TABLE OWNER_LIST;

SELECT FULLNAME AS "OWNER", string_agg(BUSINESS.NAME, ', ' ORDER BY BUSINESS.NAME) AS "BUSNESSES" FROM USERS_INFO, BUSINESS, OWNER_LIST, USERS 
						WHERE OWNER_LIST.USER_ID = USERS.ID AND OWNER_LIST.BUSINESS_ID = BUSINESS.ID AND USERS.ID = USERS_INFO.ID GROUP BY FULLNAME ORDER BY FULLNAME;

SELECT BUSINESS.NAME AS "BUSINESS", string_agg(FULLNAME, ', ' ORDER BY FULLNAME) AS "OWNERS" FROM USERS_INFO, BUSINESS, OWNER_LIST, USERS 
						WHERE OWNER_LIST.USER_ID = USERS.ID AND OWNER_LIST.BUSINESS_ID = BUSINESS.ID AND USERS.ID = USERS_INFO.ID GROUP BY BUSINESS.NAME ORDER BY BUSINESS.NAME;



SELECT BUSINESS_ID FROM OWNER_LIST GROUP BY BUSINESS_ID ORDER BY BUSINESS_ID ASC;

SELECT CURRENT_DATE ;

-----------------------------------------------------------------------------

CREATE TABLE PRODUCTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	DESCRIPTION VARCHAR(200),
	UNIQUE(DESCRIPTION, NAME)
);

--DROP TABLE PRODUCTS CASCADE;

INSERT INTO PRODUCTS(NAME, DESCRIPTION) VALUES
('Kuding Tea', '100 natural detox tea'),
('Power', 'Original power capsule for weight gain. Ð¡ontains 50 capsules');

SELECT * FROM PRODUCTS;

CREATE TABLE SECTIONS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(50) UNIQUE NOT NULL
);

INSERT INTO SECTIONS(NAME) VALUES
('Summer'), 
('Clothes'),
('Shoes'),
('Beauty'),
('Home'),
('Electronics'),
('Health & Nutrition'),
('Kids'),
('Food & Drink'),
('Sport'),
('Travel');

SELECT * FROM SECTIONS;

CREATE TABLE SUBSECTIONS(
	ID SERIAL PRIMARY KEY NOT NULL,
	SECTION_ID INT NOT NULL,
	NAME VARCHAR(50) NOT NULL,
	FOREIGN KEY (SECTION_ID) REFERENCES SECTIONS (ID),
	UNIQUE(SECTION_ID, NAME)
);


INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES
(2,'Women''s Clothing'),
(2,'Man''s Clothing'),
(2,'Accessories'),
(2,'Girl''s Clothing'),
(2,'Boy''s Clothing'),
(2,'Baby''s Clothing');

INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES
(3,'Women''s Shoes'),
(3,'Man''s Shoes'),
(3,'Girl''s Shoes'),
(3,'Boy''s Shoes'),
(3,'Baby''s Shoes');

INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES
(4,'Bath & Showe Products'),
(4,'Beauty Gift Sets'),
(4,'Cosmetic Accessories'),
(4,'Eye Makeup'),
(4,'Face Makeup'),
(4,'Hair Care'),
(4,'Lip Products'),
(4,'Nail Care'),
(4,'Perfume & Cologone'),
(4,'Shaving & Hair Removal'),
(4,'Skin Care'),
(4,'Exclusive Brands');

INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES(10, 'For Weight Gain');
INSERT INTO SUBSECTIONS(SECTION_ID, NAME) VALUES(10, 'For Weight Loss');

SELECT * FROM SUBSECTIONS;

CREATE TABLE PRODUCT_BELONGING(
	ID SERIAL PRIMARY KEY NOT NULL,
	PRODUCT_ID INT NOT NULL,
	SUBSECTION_ID INT NOT NULL,
	FOREIGN KEY (SUBSECTION_ID) REFERENCES SUBSECTIONS (ID),
	FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS (ID),
	UNIQUE(PRODUCT_ID, SUBSECTION_ID)
);

INSERT INTO PRODUCT_BELONGING(PRODUCT_ID, SUBSECTION_ID) VALUES
(1, 22), -- KUDING - SKIN CARE
(2, 24); -- POWER - SPORT GAIN WEIGHT

INSERT INTO PRODUCT_BELONGING(PRODUCT_ID, SUBSECTION_ID) VALUES
(1, 25); -- KUDING - SPORT WEIGHT LOSS

UPDATE PRODUCT_BELONGING SET PRODUCT_ID = 1  WHERE ID = 4;

SELECT * FROM PRODUCT_BELONGING;

UPDATE PRODUCT_BELONGING SET PRODUCT_ID = 1 WHERE ID = 3;

SELECT BUSINESS.NAME AS "BUSINESS", string_agg(FULLNAME, ', ' ORDER BY FULLNAME) AS "OWNERS" FROM USERS_INFO, BUSINESS, OWNER_LIST, USERS 
						WHERE OWNER_LIST.USER_ID = USERS.ID AND OWNER_LIST.BUSINESS_ID = BUSINESS.ID AND USERS.ID = USERS_INFO.ID GROUP BY BUSINESS.NAME ORDER BY BUSINESS.NAME;

SELECT PRODUCTS.NAME AS "PRODUCT", string_agg(DISTINCT SECTIONS.NAME, ', ' ORDER BY SECTIONS.NAME) AS "SECTIONS"  
	FROM PRODUCTS, SECTIONS, PRODUCT_BELONGING, SUBSECTIONS 
		WHERE SUBSECTIONS.ID = PRODUCT_BELONGING.SUBSECTION_ID AND SECTIONS.ID = SUBSECTIONS.SECTION_ID AND PRODUCT_BELONGING.PRODUCT_ID = PRODUCTS.ID GROUP BY PRODUCTS.NAME;

SELECT PRODUCTS.NAME AS "PRODUCT", string_agg(DISTINCT SUBSECTIONS.NAME, ', ' ORDER BY SUBSECTIONS.NAME) AS "SUBSECTIONS"  
	FROM PRODUCTS, SECTIONS, PRODUCT_BELONGING, SUBSECTIONS 
		WHERE SUBSECTIONS.ID = PRODUCT_BELONGING.SUBSECTION_ID AND SECTIONS.ID = SUBSECTIONS.SECTION_ID AND PRODUCT_BELONGING.PRODUCT_ID = PRODUCTS.ID GROUP BY PRODUCTS.NAME;

SELECT * FROM PRODUCT_BELONGING;

CREATE TABLE PROVIDER_CONTACTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	FULLNAME VARCHAR(30),
	PHONE VARCHAR(15),
	CONTACTS VARCHAR(30),
	ADDRESS VARCHAR(100),
	ADDRESS_ON_MAP VARCHAR(100),
	DESCRIPTION VARCHAR(300),
	UNIQUE(FULLNAME, PHONE, CONTACTS, ADDRESS)
);

ALTER TABLE PROVIDER_CONTACTS 
ADD COLUMN ADDRESS_ON_MAP VARCHAR(100);

INSERT INTO PROVIDER_CONTACTS(FULLNAME, PHONE, CONTACTS, ADDRESS, DESCRIPTION) VALUES
('Parvina Iskhaki', '901010401', 'INSTAGRAM @parvina.iskhahi', 'Mirzo Mastongulova 38/1 r 24', 'the phone belongs to Anvar - Parvina`s father');

INSERT INTO PROVIDER_CONTACTS(FULLNAME, PHONE, CONTACTS, ADDRESS, DESCRIPTION) VALUES
('Parvina Iskhaki', '901010401', 'INSTAGRAM @parvina.iskhahi', 'Mirzo Mastongulova 38/1 r 24', 'the phone belongs to Anvar - Parvina`s father');


UPDATE PROVIDER_CONTACTS SET ADDRESS_ON_MAP = '38.550368 68.812826' WHERE ID = 1;

--DROP TABLE PROVIDER_CONTACTS CASCADE;

SELECT * FROM PROVIDER_CONTACTS;

CREATE TABLE PROVIDER(
	ID SERIAL PRIMARY KEY NOT NULL,
	INFORMATION INT,
	PRODUCT INT,
	FOREIGN KEY (INFORMATION) REFERENCES PROVIDER_CONTACTS (ID),
	FOREIGN KEY (PRODUCT) REFERENCES PRODUCTS (ID),
	UNIQUE(INFORMATION, PRODUCT)
); 

INSERT INTO PROVIDER(INFORMATION, PRODUCT) VALUES
(1, 1);

--DROP TABLE PROVIDER CASCADE;

SELECT * FROM PROVIDER;

CREATE TABLE PROVIDERS_PRICE(
	ID SERIAL PRIMARY KEY NOT NULL,
	PROVIDER INT, 
	AMOUNT INT,
	PRICE INT,
	CURRENCY INT NOT NULL,
	FOREIGN KEY (PROVIDER) REFERENCES PROVIDER (ID),
	FOREIGN KEY (CURRENCY) REFERENCES CURRENCY (ID),
	UNIQUE(PROVIDER, AMOUNT, PRICE, CURRENCY)
);

ALTER TABLE PROVIDERS_PRICE 
ADD COLUMN CURRENCY INT;

ALTER TABLE PROVIDERS_PRICE
    ADD CONSTRAINT FK_PROVIDERS_PRICE_CURRENCY FOREIGN KEY (CURRENCY) REFERENCES CURRENCY (ID);

INSERT INTO PROVIDERS_PRICE(PROVIDER, AMOUNT, PRICE, CURRENCY) VALUES
(1, 150, 300, 2);

INSERT INTO PROVIDERS_PRICE(PROVIDER, AMOUNT, PRICE, CURRENCY) VALUES
(1, 300, 1000, 2);

UPDATE PROVIDERS_PRICE SET CURRENCY = 2;

INSERT INTO PROVIDERS_PRICE(PROVIDER, AMOUNT, PRICE, CURRENCY) VALUES
(2, 10, 800, 2);


SELECT PROVIDER_CONTACTS.FULLNAME AS "PROVIDER", PROVIDER_CONTACTS.PHONE AS "PHONE", PRODUCTS.NAME AS "PRODUCT"
	FROM PROVIDER_CONTACTS, PRODUCTS, PROVIDER
		WHERE PRODUCTS.ID = PROVIDER.PRODUCT AND PROVIDER.INFORMATION = PROVIDER_CONTACTS.ID;
		
SELECT * FROM PROVIDERS_PRICE;

--DROP TABLE PROVIDERS_PRICE;

CREATE TABLE TRANSACTION_STATUS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(30) UNIQUE NOT NULL
);

INSERT INTO TRANSACTION_STATUS(NAME) VALUES
('PENDING'),
('CANCELLED'),
('SUCCESS');

SELECT * FROM TRANSACTION_STATUS;

DROP TABLE TRANSACTION_STATUS;

CREATE TABLE CONSUMER(
	ID SERIAL PRIMARY KEY NOT NULL,
	FULLNAME VARCHAR(20),
	PHONE VARCHAR(15) UNIQUE NOT NULL,
	ADDRESS VARCHAR(30) NOT NULL,
	ADDRESS_ON_MAP VARCHAR(30),
	CONTACTS VARCHAR(50),
	DESCRIPTION VARCHAR(200)
);

INSERT INTO CONSUMER(FULLNAME, PHONE, ADDRESS) VALUES
('', '918704949', 'ÐÑÐ¿ÐµÑÐ°Ðº2'),
('', '927748884', 'ÐÑÑÐºÐ¸Ð½ÑÐºÐ¸Ð¹ 4'),
('', '----', '101Ð¼ÐºÑ  Xfit'),
('', '902884825', 'ÐÐ¾Ð»Ð¾Ð´ÐµÐ¶Ð½ÑÐ¹ ÑÐµÐ°ÑÑ'),
('Suman', '939025555', 'ÐÑÑÐ°ÑÐ°Ð²ÑÐ°Ð½ 11'),
('ÐÑÑÐ¾Ð´', '909200021', '91Ð¼ÐºÑ'),
('', '555360660', 'ÐÐ°Ð¹ÐºÐ°Ñ Ð³Ð¾Ð»ÑÐ±Ð¾Ð¹ ÑÐºÑÐ°Ð½'),
('', '909082828', 'Ð°Ð¿ÑÐµÐºÐ° 82'),
('', '937179595', 'ÐºÐ°ÑÐ°Ð±Ð¾Ð»Ð¾'),
('ÐÐ°Ð´Ð¸Ð½Ð°', '906557477', 'ÐÑÑÐ¾ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°Ñ Ð°Ð¿ÑÐµÐºÐ° Ð¼Ð°Ð´Ð°Ð´'),
('ÐÑÑÐ»Ð¸Ð¼Ð°', '907120401', 'Ð¤Ð¸ÑÐ´Ð°Ð²ÑÐ¸ 29 ÐºÐ² 59');

SELECT * FROM CONSUMER;

CREATE TABLE BATCH_STATUS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(30) UNIQUE NOT NULL
);

INSERT INTO BATCH_STATUS(NAME) VALUES
('OUT OF STOCK'),
('AVAILABLE IN STOCK'),
('CANCELLED');

SELECT * FROM BATCH_STATUS;


CREATE TABLE BATCH_OF_PRODUCTS(
	ID SERIAL PRIMARY KEY NOT NULL,
	PRODUCT INT NOT NULL,
	PURCHASE_DATE DATE NOT NULL,
	AMOUNT INT NOT NULL,
	REMAINING_AMOUNT INT NOT NULL,
	PRIME_COST INT NOT NULL,
	SALE_PRICE INT NOT NULL,
	COST_CURRENCY INT NOT NULL,
	SALE_CURRENCY INT NOT NULL,
	STATUS INT NOT NULL,
	FOREIGN KEY (STATUS) REFERENCES BATCH_STATUS(ID),
	FOREIGN KEY (COST_CURRENCY) REFERENCES CURRENCY(ID),
	FOREIGN KEY (SALE_CURRENCY) REFERENCES CURRENCY(ID)
);

ALTER TABLE BATCH_OF_PRODUCTS 
ADD COLUMN SALE_CURRENCY INT;

ALTER TABLE BATCH_OF_PRODUCTS 
ADD COLUMN COST_CURRENCY INT;



ALTER TABLE BATCH_OF_PRODUCTS
    ADD CONSTRAINT FK_BATCH_OF_PRODUCTS_CURRENCY FOREIGN KEY (COST_CURRENCY) REFERENCES CURRENCY (ID);
	
ALTER TABLE BATCH_OF_PRODUCTS
    ADD CONSTRAINT FK_BATCH_OF_PRODUCTS_SALE_CURRENCY FOREIGN KEY (SALE_CURRENCY) REFERENCES CURRENCY (ID);
	


INSERT INTO BATCH_OF_PRODUCTS(PRODUCT, PURCHASE_DATE, AMOUNT, REMAINING_AMOUNT, PRIME_COST, SALE_PRICE, STATUS, COST_CURRENCY, SALE_CURRENCY) VALUES
(1, '2021.06.16', 150, 100, 38, 55, 2, 2, 2);

SELECT BATCH_OF_PRODUCTS.ID, PRODUCTS.NAME AS "PRODUCT", BATCH_OF_PRODUCTS.AMOUNT AS "AMOUNT", BATCH_OF_PRODUCTS.PRIME_COST AS "PRIME COST", 
	BATCH_OF_PRODUCTS.SALE_PRICE AS "SALE PRICE", BATCH_STATUS.NAME AS "STATUS"
		FROM PRODUCTS, BATCH_OF_PRODUCTS, BATCH_STATUS
			WHERE BATCH_OF_PRODUCTS.PRODUCT = PRODUCTS.ID AND BATCH_STATUS.ID = BATCH_OF_PRODUCTS.STATUS; 

UPDATE BATCH_OF_PRODUCTS SET SALE_CURRENCY = 2;

SELECT * FROM BATCH_OF_PRODUCTS;

CREATE TABLE TRANSACTION_TYPE(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(50) UNIQUE NOT NULL
);

INSERT INTO TRANSACTION_TYPE(NAME) VALUES
('DELIVERY'),
('WITHOUT DELIVERY');

SELECT * FROM TRANSACTION_TYPE;


CREATE TABLE TRANSACTIONS(
	ID SERIAL PRIMARY KEY NOT NULL,
	PRICE INT NOT NULL,
	T_DATE DATE NOT NULL,
	BATCH INT NOT NULL,
	AMOUNT INT NOT NULL,
	CONSUMER INT NOT NULL,
	STATUS INT NOT NULL,
	LAST_UPDATE DATE,
	CURRENCY INT NOT NULL,
	TRANSACTION_TYPE INT NOT NULL,
	FOREIGN KEY (BATCH) REFERENCES BATCH_OF_PRODUCTS(ID),
	FOREIGN KEY (CONSUMER) REFERENCES CONSUMER(ID),
	FOREIGN KEY (STATUS) REFERENCES TRANSACTION_STATUS(ID),
	FOREIGN KEY (CURRENCY) REFERENCES CURRENCY(ID),
	FOREIGN KEY (TRANSACTION_TYPE) REFERENCES TRANSACTION_TYPE(ID)
);

ALTER TABLE TRANSACTIONS 
ADD COLUMN TRANSACTION_TYPE INT;

ALTER TABLE TRANSACTIONS
    ADD CONSTRAINT FK_TRANSACTIONS_TRANSACTION_TYPE FOREIGN KEY (TRANSACTION_TYPE) REFERENCES TRANSACTION_TYPE (ID);
	
UPDATE TRANSACTIONS SET TRANSACTION_TYPE = 1;

 SET datestyle = dmy;

INSERT INTO TRANSACTIONS(PRICE, T_DATE, BATCH, AMOUNT, CONSUMER, STATUS, LAST_UPDATE, CURRENCY, TRANSACTION_TYPE) VALUES
(55, '21.05.2021', 1, 1, 1, 3, '21.05.2021', 2, 1),
(55, '23.05.2021', 1, 1, 2, 3, '23.05.2021', 2, 1),
(55, '25.05.2021', 1, 1, 3, 3, '25.05.2021', 2, 1),
(55, '25.05.2021', 1, 1, 4, 3, '25.05.2021', 2, 1),
(55, '26.05.2021', 1, 1, 5, 3, '26.05.2021', 2, 1),
(55, '26.05.2021', 1, 3, 6, 3, '26.05.2021', 2, 1),
(55, '29.05.2021', 1, 1, 7, 3, '29.05.2021', 2, 1),
(55, '01.06.2021', 1, 1, 8, 3, '01.06.2021', 2, 1),
(55, '04.06.2021', 1, 1, 8, 3, '04.06.2021', 2, 1),
(55, '09.06.2021', 1, 1, 9, 3, '09.06.2021', 2, 1),
(55, '11.06.2021', 1, 2, 10, 3, '11.06.2021', 2, 1),
(55, '15.06.2021', 1, 2, 11, 3, '15.06.2021', 2, 1);

UPDATE TRANSACTIONS SET CURRENCY = 1;

ALTER TABLE TRANSACTIONS 
ADD COLUMN PRICE INT;

ALTER TABLE TRANSACTIONS 
ADD COLUMN CURRENCY INT;

ALTER TABLE TRANSACTIONS
    ADD CONSTRAINT FK_TRANSACTIONS_CURRENCY FOREIGN KEY (CURRENCY) REFERENCES CURRENCY (ID);
	
SELECT BATCH_OF_PRODUCTS.PRIME_COST FROM BATCH_OF_PRODUCTS;

SELECT TRANSACTIONS.T_DATE AS "DATE",  TRANSACTIONS.BATCH AS "BATCH", TRANSACTIONS.AMOUNT AS "AMOUNT", CONSUMER.FULLNAME AS "NAME", 
	CONSUMER.PHONE AS "PHONE", TRANSACTIONS.PRICE AS "PRICE", CURRENCY.NAME AS "CURRENCY", (TRANSACTIONS.AMOUNT * TRANSACTIONS.PRICE) AS "TOTAL SUM",
	(TRANSACTIONS.PRICE - BATCH_OF_PRODUCTS.PRIME_COST) * TRANSACTIONS.AMOUNT  AS "NET PROFIT", TRANSACTION_TYPE.NAME AS "TRANSACTION TYPE"
		FROM TRANSACTIONS, CONSUMER, CURRENCY, BATCH_OF_PRODUCTS, TRANSACTION_TYPE
			WHERE CONSUMER.ID = TRANSACTIONS.CONSUMER AND CURRENCY.ID = TRANSACTIONS.CURRENCY AND BATCH_OF_PRODUCTS.ID = TRANSACTIONS.BATCH 
				AND TRANSACTIONS.TRANSACTION_TYPE = TRANSACTION_TYPE.ID;

SELECT * FROM TRANSACTIONS;

CREATE TABLE DELIVERIES(
	ID SERIAL PRIMARY KEY NOT NULL,
	ADDRESS VARCHAR(30) NOT NULL,
	DESCRIPTION VARCHAR(300),
	DELIVERYMAN INT NOT NULL,
	TRANSACTION_ID INT NOT NULL,
	STATUS INT NOT NULL,
	FOREIGN KEY (DELIVERYMAN) REFERENCES USERS(ID),
	FOREIGN KEY (TRANSACTION_ID) REFERENCES TRANSACTIONS(ID) 
);

CREATE TABLE DELIVERIES_STATUS(
	ID SERIAL PRIMARY KEY NOT NULL,
	NAME VARCHAR(50) UNIQUE NOT NULL
);

UPDATE DELIVERIES SET STATUS = 1;

ALTER TABLE DELIVERIES 
ADD COLUMN STATUS INT;


INSERT INTO DELIVERIES_STATUS(NAME) VALUES
('DELIVERED'),
('NOT DELIVERED YET'),
('CANCELED');

SELECT * FROM DELIVERIES_STATUS;


INSERT INTO DELIVERIES(ADDRESS, DELIVERYMAN, TRANSACTION_ID, STATUS) VALUES
('ÐÑÐ¿ÐµÑÐ°Ðº2', 2, 1, 1),
('ÐÑÑÐºÐ¸Ð½ÑÐºÐ¸Ð¹ 4', 2, 2, 1),
('101Ð¼ÐºÑ  Xfit', 2, 3, 1),
('ÐÐ¾Ð»Ð¾Ð´ÐµÐ¶Ð½ÑÐ¹ ÑÐµÐ°ÑÑ', 2, 4, 1),
('ÐÑÑÐ°ÑÐ°Ð²ÑÐ°Ð½ 11', 2, 5, 1),
('91Ð¼ÐºÑ', 2, 6, 1),
('ÐÐ°Ð¹ÐºÐ°Ñ Ð³Ð¾Ð»ÑÐ±Ð¾Ð¹ ÑÐºÑÐ°Ð½', 2, 7, 1),
('Ð°Ð¿ÑÐµÐºÐ° 82', 2, 8, 1),
('Ð°Ð¿ÑÐµÐºÐ° 82', 2, 9, 1),
('ÐºÐ°ÑÐ°Ð±Ð¾Ð»Ð¾', 2, 10, 1),
('ÐÑÑÐ¾ÐºÐ¾Ð¼Ð±Ð¸Ð½Ð°Ñ Ð°Ð¿ÑÐµÐºÐ° Ð¼Ð°Ð´Ð°Ð´', 2, 11, 1),
('Ð¤Ð¸ÑÐ´Ð°Ð²ÑÐ¸ 29 ÐºÐ² 59', 2, 12, 1);

SELECT TRANSACTIONS.T_DATE AS "DATE", DELIVERIES.ADDRESS AS "ADDRESS", USERS_INFO.FULLNAME AS "DELIVERYMAN", TRANSACTIONS.AMOUNT AS "AMOUNT", DELIVERIES_STATUS.NAME AS "STATUS"
	FROM TRANSACTIONS, DELIVERIES, USERS_INFO, USERS, DELIVERIES_STATUS
		WHERE TRANSACTIONS.ID = DELIVERIES.TRANSACTION_ID AND DELIVERIES.DELIVERYMAN = USERS.ID AND USERS_INFO.ID = USERS.ID AND DELIVERIES_STATUS.ID = DELIVERIES.STATUS;

SELECT * FROM DELIVERIES;




